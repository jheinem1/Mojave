/// <reference types="@rbxts/compiler-types" />
import { MiddlewareOverload } from "../middleware";
import { default as AsyncFunction } from "./ServerAsyncFunction";
import ServerEvent, { default as Event } from "./ServerEvent";
import { default as GameMessagingEvent } from "./ServerMessagingEvent";
import { default as CreateListener } from "./CreateServerListener";
import { default as Function } from "./ServerFunction";
import config from "../configuration";
export { Event, AsyncFunction, Function, GameMessagingEvent, CreateListener };
/**
 * Creates an event on the server
 *
 * Programmatically equivalent to `new Net.Server.Event(name, middleware)`
 *
 * @param name The name of the event
 * @param middleware The middleware attached to this event
 */
export declare function CreateEvent<ConnectArgs extends unknown[], CallArgs extends unknown[]>(name: string, middleware?: MiddlewareOverload<ConnectArgs>): ServerEvent<ConnectArgs, CallArgs>;
/**
 * Creates an event on the server
 * Same as `CreateEvent`, but type-wise removes `Connect`.
 */
export declare const CreateSender: <CallArgs extends Array<unknown>>(name: string) => Omit<ServerEvent<[], CallArgs>, "Connect">;
/**
 * Creates a function on the server
 *
 * Programmatically equivalent to `new Net.Server.AsyncFunction(name, middleware)`
 *
 * @param name The name of the function
 * @param middleware The middleware attached to this function
 */
export declare function CreateAsyncFunction<CallArguments extends Array<unknown>>(name: string, middleware?: MiddlewareOverload<CallArguments>): AsyncFunction<CallArguments, unknown[], unknown, unknown>;
/**
 * An event declaration
 */
export declare type EventDeclaration = readonly [name: string, ...mw: MiddlewareOverload<unknown[]>];
declare type InferMiddlewareTypes<T> = T extends [string, ...MiddlewareOverload<infer A>] ? ServerEvent<A> : T extends string ? ServerEvent : never;
declare type EventArray<Tuple extends [...defined[]]> = {
    [Index in keyof Tuple]: InferMiddlewareTypes<Tuple[Index]>;
};
/**
 * Creates multiple server events by name, or declaration
 *
 * An example of a simple list of events is:
 *
 * ```ts
 * const [eventA, eventB] = Net.Server.CreateEvents("A", "B");
 * ```
 * Both `eventA` and `eventB` will be generic server events. If you want to include middleware, you can do:
 *
 * ```ts
 * const [eventA, middlewareEventB] = Net.Server.CreateEvents(
 * 	"A",
 * 	["B", createTypeChecker(t.string)]
 * )
 * ```
 * In this instance, it would be like doing `const middlewareEventB = new Net.Server.Event("B", [createTypeChecker(t.string)])`
 * Event A would still take any arguments, and Event B would take specific arguments (in this case, `string`)
 */
export declare function CreateEvents<T extends (string | EventDeclaration)[]>(...evts: T): LuaTuple<EventArray<T>>;
/**
 * Set a configuration value for the server
 */
export declare const SetConfiguration: typeof config.SetConfiguration;
/**
 * Get a configuration value for the server
 */
export declare const GetConfiguration: typeof config.GetConfiguration;
